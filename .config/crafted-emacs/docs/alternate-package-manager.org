#+title: Alternate Package Manager

* 5.1 Using alternate package managers
** general, simple case
- Not everyone will prefer to use Emacs' built-in package manager, ‘package.el’.
- Using the package bundle modules from Crafted Emacs is still possible, however, you will potentially need to iterate over the ‘package-selected-packages’ list to perform the install for your package manager.
- To help with that, the ‘crafted-package-config’ module provides a variable to set and a function to call.
- Here is an example using ‘straight-use-package’ as the tool to install packages.
- The following lines must be called before any package is installed (preferable in ‘early-init.el’):

#+begin_src emacs-lisp
(load (expand-file-name "modules/crafted-package-config" crafted-emacs-home))

(setq crafted-package-installer #'straight-use-package)
(setq crafted-package-installed-predicate #'straight--installed-p)
#+end_src

- In your ‘init.el’ you have to call ‘crafted-package-install-selected-packages’ instead of ‘package-install-selected-packages’, after adding your packages to ‘package-selected-packages’.
- Note: This usage is simple in the sense full recipes are not used when using Crafted Emacs package bundle modules.
- The above essentially runs code like the following:
#+begin_src emacs-lisp
(straight-use-package 'corfu)
 #+end_src

- It is not required to use the Crafted Emacs package bundle modules, you are free to install packages in whatever manner you choose, for example, using ‘guix-home’ to install Emacs packages from the Guix Store.
- Similarly, using ‘straight’, ‘elpaca’, ‘package-vc’ or others can be used to install any packages you choose. Once your packages are installed, you can then use the Crafted Emacs configuration modules.
- These modules have names like ‘crafted-completion-config.el’ for example.  Add these to your ‘init.el’ *after* installing packages.

** straight-el example
You find a full runnable example early-init.el to bootstrap straight (../examples/straight-el/early-init.el) in the examples directory.

Merge it into your ‘early-init.el’ or copy it to your ‘custom-modules’ folder.  In the later case ‘early-init.el’ would look like this:
#+begin_src emacs-lisp
(setq crafted-emacs-home "~/crafted-emacs")

;; Assumes you renamed the file to "crafted-early-init-straight.el"
(load (expand-file-name "custom-modules/crafted-early-init-straight"
                        user-emacs-directory))
#+end_src
