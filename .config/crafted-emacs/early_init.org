#+title: Crafted Early Init
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :tangle early-init.el :mkdirp yes

* load bootstrap-straight
#+begin_src emacs-lisp
(load (expand-file-name "modules/bootstrap-straight" user-emacs-directory))
#+end_src
* set custom.el file
- user-emacs-directory is defined by [[file:.config/chemacs/profiles.el::"crafted" . ((user-emacs-directory . "~/.config/.crafted-emacs"][chemacs/profiles.el]]
#+begin_src emacs-lisp
;; set custom.el file
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(when (and custom-file
           (file-exists-p custom-file))
  (load custom-file nil :nomessage))
#+end_src
** Explanation:
1. =when (and custom-file (file-exists-p custom-file))=:
   - This part checks two conditions using the =and= operator:
     - =custom-file=: This variable should be non-nil, ensuring that a custom file path has been specified.
     - =(file-exists-p custom-file)=: This checks whether the file specified by =custom-file= actually exists.

2. =(load custom-file nil :nomessage)=
   - If both conditions in the =and= form are true, the =load= function is called with =custom-file= as its argument.
   - =load=: This function reads and evaluates the contents of the provided file.
   - =nil=: The second argument, =nil=, indicates that the function should not provide a suffix for the file (it should load the file exactly as specified).
   - =:nomessage=: The third argument, =:nomessage=, suppresses the "Loading" message that would normally be displayed in the echo area.
** In Summary:
- This code ensures that if the =custom-file= variable is set and the specified file exists, it will load the file without displaying a "Loading" message.
- This mechanism is typically used in your main Emacs configuration file (such as =init.el= or =.emacs=) to load customizations from another file if it exists, enhancing modularity and manageability of your Emacs setup.
** what is the custom.el file?
- used to store user customizations made through the Emacs customization interface
- allows users to modify Emacs settings and variables in a more user-friendly way compared to manually editing the =init.el= or =.emacs= configuration files
- When you use the =M-x customize= command (or any related customization commands like =M-x customize-variable=), Emacs provides a graphical interface through which you can change various settings.
- The changes you make through this interface are automatically saved to the =custom.el= file, ensuring that they persist across Emacs sessions.
- the values we set programmatically will also be stored in this file and loaded by the code above.
*** Key Points about =custom.el=:

- *Automatic Saving*: Changes made through the customization interface are automatically saved to =custom.el= without requiring manual editing.
- *Separation of Concerns*: Keeping customizations in =custom.el= helps keep your main configuration file (=init.el= or =.emacs=) clean and organized.
- *Location*: By default, =custom.el= is usually located in the same directory as your main initialization file (=~/.emacs.d/= for =init.el= or your home directory for =.emacs=). However, you can customize this location.
- *Generated Content*: The content of =custom.el= is generated by Emacs and is not typically edited manually.

*** Example of Customizations in =custom.el=:

Here is an example of what entries in =custom.el= might look like:

#+begin_src emacs-lisp :tangle no
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(visible-bell t))

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+end_src

*** How to Use =custom.el=:

1. *Customizing Variables*: Use =M-x customize-variable= to customize individual variables.
2. *Customizing Faces*: Use =M-x customize-face= to customize the appearance of various UI elements.
3. *Saving Changes*: After customizing, click the "Save for future sessions" button to save changes to =custom.el=.

*** Moving =custom.el=:

- You can instruct Emacs to save customizations to a different file. This can be done in your main configuration file:

#+begin_src emacs-lisp :tangle no
(setq custom-file "~/.emacs.d/my-custom.el")
(load custom-file)
#+end_src

In this example, customizations are saved to =my-custom.el= instead of the default =custom.el=.

=custom.el= helps streamline your Emacs configuration by handling routine customizations automatically, allowing you to focus on more complex configurations in your main init file.
* load crafted init config
- sets up the load-path, so code from modules and custom-modules can be loaded with require
- sets up the info system to make this documentation accessible from within Emacsâ€™ info buffer
- ensures all customizations and packages are saved to the custom-file
#+begin_src emacs-lisp
;; load crafted init config
(load (expand-file-name  "modules/crafted-init-config" user-emacs-directory))
#+end_src
* provide early-init
#+begin_src emacs-lisp
;; provide package
(provide 'early-init)
#+end_src
